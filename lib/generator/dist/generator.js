// Generated by CoffeeScript 1.9.3
var RESTClient, _cheerio, _moduleDir, beautify, exec, fs, html2jade, jsx, path;

jsx = jsx || {};

jsx.Converter = (function() {
  var log;

  function Converter() {
    log(1);
  }

  Converter.prototype.convert = function() {
    var a;
    a = 2;
    return log(a);
  };

  log = function(arg) {
    return console.log(arg);
  };

  return Converter;

})();

module.exports = jsx;

jsx = jsx || {};

jsx.CSSGenerator = (function() {
  var _json;

  _json = null;

  function CSSGenerator() {}

  CSSGenerator.prototype.load = function(jsonFile) {
    return _json = require(jsonFile);
  };

  CSSGenerator.prototype.generate = function() {};

  return CSSGenerator;

})();

module.exports = jsx;

jsx = jsx || {};

jsx.HTMLGenerator = (function() {
  var _cheerio, _components, _createElement, _createTextElement, _dom, _json, _parseBlockLayerData, _parseImageLayerData, _parseLayerData, _parseLayerPath, _parseTextLayerData, _writeFileCallback, fs;

  fs = require('fs');

  _json = null;

  _dom = {};

  _components = [];

  _cheerio = require('cheerio');

  function HTMLGenerator() {}

  HTMLGenerator.prototype.load = function(jsonFile) {
    return _json = require(jsonFile);
  };

  HTMLGenerator.prototype.generate = function(override, jade) {
    var binPath, htmlCode, html_template, jade_template, key, name, path, results, src, srcPath, value;
    if (override == null) {
      override = true;
    }
    if (jade == null) {
      jade = false;
    }
    html_template = fs.readFileSync('./template/component.html', 'utf8') || '';
    if (jade === true) {
      jade_template = fs.readFileSync('./template/component.html', 'utf8') || '';
    }
    for (key in _json) {
      value = _json[key];
      if (value) {
        _parseLayerData(value);
      }
    }
    results = [];
    for (key in _dom) {
      value = _dom[key];
      src = value.$.html();
      name = value.componentName;
      htmlCode = html_template.split('${name}').join(name);
      htmlCode = htmlCode.split('${html}').join(src);
      path = 'components';
      if (!fs.existsSync(path)) {
        fs.mkdir(path);
      }
      path += '/' + name;
      if (!fs.existsSync(path)) {
        fs.mkdir(path);
      }
      binPath = path + '/bin';
      if (!fs.existsSync(binPath)) {
        fs.mkdir(binPath);
      }
      binPath += '/' + name + '.html';
      if (!fs.existsSync(binPath) || override) {
        fs.writeFile(binPath, htmlCode, null, _writeFileCallback(name, function(name) {
          return console.log('file >>', name);
        }));
      }
      if (jade === true) {
        srcPath = path + '/src';
        if (!fs.existsSync(srcPath)) {
          fs.mkdir(srcPath);
        }
        srcPath += '/' + name + '.jade';
        if (!fs.existsSync(srcPath) || override) {
          results.push(fs.writeFile(srcPath, src, null, _writeFileCallback(name, function(name) {
            return console.log('file >>', name);
          })));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  _writeFileCallback = function(arg, func) {
    return function() {
      func(arg);
    };
  };

  _parseLayerData = function(data) {
    var type;
    if (data.meta) {
      type = data.meta.type;
      if (type === 'image') {
        return _parseImageLayerData(data);
      } else if (type === 'text') {
        return _parseTextLayerData(data);
      } else {
        return _parseBlockLayerData(data);
      }
    }
  };

  _parseImageLayerData = function(data) {
    var $, $cell, $element, height, imgsrc, meta, name, opt, parent, path, ref, ref1, text, width;
    path = data.path;
    meta = data.meta;
    name = meta.name;
    opt = data.data;
    parent = _dom[path];
    $ = _createElement(data);
    data.$ = $;
    imgsrc = ((ref = meta.image) != null ? ref.url : void 0) || '';
    width = ' data-width="' + (meta.size.width || 'auto') + '"';
    height = ' data-height="' + (meta.size.height || 'auto') + '"';
    $element = $('div');
    text = ((ref1 = meta.text) != null ? ref1.text : void 0) || '';
    if (opt.background) {
      if (text) {
        text = '<span class="text">' + text + '</span>';
      }
      $element.append('<div class="image" data-src="' + imgsrc + '"' + width + height + '>' + text + '</div>');
    } else {
      $element.append('<img src="' + imgsrc + '"' + width + height + ' alt="' + text + '"></div>');
    }
    if (parent) {
      $cell = $('<div class="grid-cell"></div>');
      $cell.append($element);
      return parent.element.append($cell);
    }
  };

  _parseTextLayerData = function(data) {
    var $, $cell, $element, meta, name, opt, parent, path, ref, text;
    path = data.path;
    meta = data.meta;
    name = meta.name;
    opt = data.data;
    parent = _dom[path];
    $ = _createElement(data);
    data.$ = $;
    $element = $('div');
    text = (ref = meta.text) != null ? ref.text : void 0;
    if (text) {
      text = text.split('\n\n').join('</p><p>');
      text = text.split('\n').join('<br>');
      $element.append('<p>' + text + '</p>');
    }
    if (parent) {
      $cell = $('<div class="grid-cell"></div>');
      $cell.append($element);
      return parent.element.append($cell);
    }
  };

  _parseBlockLayerData = function(data) {
    var $, $cell, $container, $element, meta, name, opt, parent, path;
    path = data.path;
    meta = data.meta;
    name = meta.name;
    opt = data.data;
    parent = _dom[path];
    $ = _createElement(data);
    $container = $('div');
    data.$ = $;
    data.container = $container;
    $element = $('<div class="grid"></div>');
    data.element = $element;
    $container.append($element);
    _dom[path + name + '/'] = data;
    if (parent) {
      $cell = $('<div class="grid-cell"></div>');
      if (data.isComponent) {
        $cell.append('<' + data.componentName + '></' + data.componentName + '>');
      } else {
        $cell.append($container);
      }
      parent.element.append($cell);
    }
    if (data.isComponent) {
      return _components.push(data);
    }
  };

  _createElement = function(data) {
    var $, $div, component, name;
    name = data.meta.name || '';
    component = data.data.component;
    $ = _cheerio.load('<div></div>');
    $div = $('div');
    if (component && component !== 'none') {
      $div.addClass(component);
      data.isComponent = true;
      data.componentName = component;
    }
    $div.addClass(name);
    return $;
  };

  _createTextElement = function(textObj) {
    return '<div class="grid-cell"><p>' + ((textObj != null ? textObj.text : void 0) || '') + '</p></div>';
  };

  _parseLayerPath = function(data) {
    var level, list, path;
    path = data.path;
    list = path.split('/');
    level = list.length;
    return data.level = level;
  };

  return HTMLGenerator;

})();

module.exports = jsx;

jsx = jsx || {};

RESTClient = require('node-rest-client').Client;

jsx.LayoutJSONParser = (function() {
  var _data, _indexPositionSort, _layouts, _meta, _options, _setupDocumentData, _setupIndexData, _setupLayoutNodesData;

  _layouts = null;

  _options = null;

  _meta = null;

  _data = null;

  function LayoutJSONParser() {}

  LayoutJSONParser.prototype.load = function(layoutJson, optionJson, callback) {
    var client, e;
    _layouts = require(layoutJson);
    _options = require(optionJson);
    if (_options.root.docs_url) {
      try {
        client = new RESTClient();
        client.get(_options.root.docs_url, function(data, response) {
          var cols, e, i, j, key, len, ref, tsv, value;
          try {
            if (data) {
              _meta = {};
              tsv = String(data).split('\r\n');
              len = tsv.length;
              for (i = j = 1, ref = len; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
                cols = tsv[i].split('\t');
                key = cols[1];
                value = cols[2];
                _meta[key] = value;
              }
            }
          } catch (_error) {
            e = _error;
            console.log('Parse Error : Google Spreadsheets');
          }
          if (callback) {
            return callback();
          }
        });
      } catch (_error) {
        e = _error;
        console.log('Load Error : Google Spreadsheets');
      }
      if (callback) {
        return callback();
      }
    } else {
      if (callback) {
        return callback();
      }
    }
  };

  LayoutJSONParser.prototype.parse = function() {
    _data = {
      meta: _meta
    };
    _setupDocumentData(_data, _layouts, _options);
    _setupIndexData(_layouts.index, _layouts.layers);
    _setupLayoutNodesData(_data, _layouts, _options);
    return _data;
  };

  _setupIndexData = function(index, layers) {
    var bottomBorder, i, isPositionRelative, item, j, k, l, layer, len, list, maxY, minY, next, next_id, option, parent, parent_id, prev_id, ref, ref1, ref2, results;
    list = index.children;
    len = list.length;
    prev_id = null;
    next_id = null;
    parent_id = index.id;
    minY = 9999999999;
    maxY = 0;
    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      item = list[i];
      layer = layers[item.id];
      option = _options[item.id];
      if (option.use_background) {
        parent = layers[parent_id];
        parent.background = {
          image: option.layer_name,
          pos_x: option.horizontal,
          pos_y: option.vertical
        };
        item.enabled = false;
        option.enabled = false;
        item.top = 0;
        item.left = 0;
        item.bottom = 0;
        item.right = 0;
        continue;
      }
      if (layer) {
        item.top = layer.meta.position.absolute.y;
        item.left = layer.meta.position.absolute.x;
        item.bottom = layer.meta.size.height + item.top;
        item.right = layer.meta.size.width + item.left;
        layer.bounds = {
          top: item.top,
          left: item.left,
          bottom: item.bottom,
          right: item.right
        };
      } else {
        item.top = 0;
        item.left = 0;
        item.bottom = 0;
        item.right = 0;
      }
    }
    list.sort(_indexPositionSort);
    isPositionRelative = true;
    bottomBorder = 0;
    for (i = k = 0, ref1 = len; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      item = list[i];
      if (item.enabled) {
        if (bottomBorder <= item.bottom) {
          bottomBorder = item.bottom;
        } else {
          isPositionRelative = false;
          break;
        }
      }
    }
    results = [];
    for (i = l = 0, ref2 = len; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
      item = list[i];
      item.positionRelative = isPositionRelative;
      next = list[i + 1];
      next_id = next ? next.id : null;
      item.next_id = next_id;
      item.prev_id = prev_id;
      if (item.enabled) {
        prev_id = item.id;
      }
      results.push(_setupIndexData(item, layers));
    }
    return results;
  };

  _indexPositionSort = function(a, b) {
    if (a.top === b.top) {
      if (a.left === b.left) {
        return 0;
      } else if (a.left < b.left) {
        return -1;
      }
      return 1;
    } else if (a.top < b.top) {
      return -1;
    }
    return 1;
  };

  _setupDocumentData = function(data, layouts, options) {
    var bottom, height, id, item, layerName, layers, left, maxX, maxY, minX, minY, offsetX, offsetY, pos, ref_id, referers, right, root, size, top, width;
    minX = 999999;
    minY = 0;
    maxX = 0;
    maxY = 0;
    layers = layouts.layers;
    referers = [];
    for (id in layers) {
      item = layers[id];
      layerName = options[id].layer_name;
      if (layerName.match(/^@\d+$/)) {
        ref_id = layerName.match(/^@(\d+)$/)[1];
        if (referers.indexOf(ref_id) < 0) {
          referers.push(ref_id);
        }
      }
      pos = item.meta.position.absolute;
      size = item.meta.size;
      left = pos.x;
      top = pos.y;
      right = left + size.width;
      bottom = top + size.height;
      if (minX > left) {
        minX = left;
      }
      if (maxX < right) {
        maxX = right;
      }
      if (maxY < bottom) {
        maxY = bottom;
      }
    }
    root = options.root;
    width = maxX - minX;
    height = maxY;
    offsetX = minX;
    offsetY = minY;
    data.document = {
      title: root.doc_title,
      filename: root.name.split('.').shift(),
      psd: root.name,
      horizontal: root.horizontal,
      vertical: root.vertical,
      device: root.doc_type,
      width: width,
      height: height,
      offsetX: -offsetX,
      offsetY: -offsetY,
      bgcolor: root.bgcolor,
      margin: root.margin,
      referers: referers
    };
  };

  _setupLayoutNodesData = function(data, layouts, options) {
    var id, index, item, layers, nodes;
    nodes = {};
    layers = layouts.layers;
    index = layouts.index;
    for (id in layers) {
      item = layers[id];
      item.option = options[id];
    }
    data.index = index;
    return data.layers = layers;
  };

  return LayoutJSONParser;

})();

module.exports = jsx;

jsx = jsx || {};

exec = require('exec');

beautify = require('js-beautify');

path = require('path');

fs = require('fs');

_cheerio = require('cheerio');

html2jade = require('html2jade');

_moduleDir = module.filename.replace(/\/[^\/]+$/, '/');

jsx.LayoutPreviewGenerator = (function() {
  var $, _assets, _componentExportable, _components, _copyComponentAssets, _copyHTMLAssets, _createComponentFiles, _createComponents, _createElementCSS, _createElementTag, _createHTML, _createPackageJson, _createTextElementCSS, _data, _generateNode, _generateNodeList, _generateRelativeLayout, _getBasicStyle, _getMetaData, _getStylePSE, _getText, _isPositionRelative, _packageJsonTemplate, _params, _ref_elements, _replaceAssetPath;

  _data = null;

  _params = null;

  _components = null;

  _assets = 'test_layout-assets/';

  _componentExportable = true;

  _ref_elements = {};

  _packageJsonTemplate = '';

  $ = null;

  function LayoutPreviewGenerator() {}

  LayoutPreviewGenerator.prototype.load = function(data) {
    _data = data;
  };

  LayoutPreviewGenerator.prototype.generate = function(params) {
    var $body, $main, body, dest, doc, html, htmlFile, style;
    _params = params;
    $ = _cheerio.load('<div><div id="main"></div></div>', {
      decodeEntities: false
    });
    $body = $('div');
    $main = $('div#main');
    doc = _data.document;
    if (!dest) {
      dest = './build';
    }
    _components = [];
    _ref_elements = {};
    params = {};
    style = _getBasicStyle(_data.document);
    _generateRelativeLayout(_data, $main, params);
    style += params.css;
    body = $body.html();
    body = '<div id="container">' + body + '</div>';
    if (_componentExportable) {
      body += '<script src="../components/libs/bundle.js" exclude></script>';
      body += '<script src="../components/html-component/dist/env.js" exclude></script>';
      body += '<script src="../components/html-component/dist/html-component.js" exclude></script>';
      body += '<script src="../components/html-component/dist/html-component-debug.js" exclude></script>';
    }
    html = _createHTML(doc.title, style, body);
    html = beautify.html(html);
    htmlFile = path.join(_params.dest_dir, _params.filename);
    return exec('mkdir -p ' + dest, function() {
      fs.writeFile(htmlFile, html, {
        encoding: 'utf8'
      }, null);
      return _copyHTMLAssets(html, function() {
        if (_params.export_jade) {
          return exec('mkdir -p ' + './src/pages', function() {
            return html2jade.convertHtml(html, {
              donotencode: true
            }, function(err, jade) {
              jade = jade.replace(/([\r\n]+)\s+\|\s*[\r\n]+/g, '$1');
              fs.writeFile('./src/pages/' + _params.filename.replace('.html', '.jade'), jade, {
                encoding: 'utf8'
              }, null);
              if (_componentExportable) {
                return _createComponents();
              }
            });
          });
        } else {
          if (_componentExportable) {
            return _createComponents();
          }
        }
      });
    });
  };

  _copyHTMLAssets = function(html, callback) {
    var copyList, dstDir, j, len1, matches, pathes, src, srcDir, src_diff_1, src_diff_2;
    pathes = [];
    matches = html.match(/"[^"]+\.(png|jpg|gif|json|svg|swf|mp3|mp4|mov|wav|ogg|webm)"/gm);
    matches.forEach(function(code) {
      var src;
      code = code.replace(/"/g, '');
      src = path.dirname(code);
      if (code.match(/^https?:\/\//) || code.indexOf('html-component-debug.js') >= 0) {

      } else if (pathes.indexOf(src) < 0) {
        return pathes.push(src);
      }
    });
    copyList = [];
    for (j = 0, len1 = pathes.length; j < len1; j++) {
      src = pathes[j];
      src_diff_1 = path.join(_params.cwd, src.replace(_params.assets_src_path, _params.assets_dest));
      src_diff_2 = path.join(_params.cwd, _params.assets_dest);
      srcDir = path.join(_params.assets_src, src_diff_1.replace(src_diff_2, ''));
      dstDir = path.dirname(src_diff_1);
      copyList.push({
        mkdir: dstDir,
        cpSrc: srcDir,
        cpDst: dstDir
      });
    }
    return _copyComponentAssets(null, {
      assets: copyList
    }, callback);
  };

  _createComponents = function() {
    var css, data, html, params, tmplPath;
    if (!_packageJsonTemplate) {
      tmplPath = path.join(_moduleDir, '../../../template/package.json');
      _packageJsonTemplate = fs.readFileSync(tmplPath, {
        encoding: 'utf8'
      });
    }
    data = _components.shift();
    if (data) {
      html = data.node.html();
      html = '<div class="pse l' + data.id + ' ' + data.name + '">' + html + '</div>';
      css = data.data.css;
      html = _createHTML(data.name, css, html, true);
      html = beautify.html(html);
      params = _replaceAssetPath(data, html);
      return _copyComponentAssets(data, params, function() {
        return _createComponentFiles(data, params, function() {
          _createPackageJson(data);
          return _createComponents();
        });
      });
    }
  };

  _createPackageJson = function(data) {
    var filePath, json;
    filePath = 'components/' + data.name + '/package.json';
    filePath = path.join(_params.cwd, filePath);
    json = _packageJsonTemplate.split('${name}').join(data.name);
    return fs.writeFileSync(filePath, json, {
      encoding: 'utf8'
    });
  };

  _replaceAssetPath = function(data, html) {
    var asset, dst, dstBase, dstDir, j, len1, matches, pathes, result, src, srcDir;
    pathes = [];
    result = {
      html: html,
      base: 'components/' + data.name + '/dist/',
      assets: []
    };
    dstBase = result.base;
    matches = html.match(/"[^"]+\.(png|jpg|gif|json|svg|swf|mp3|mp4|mov|wav|ogg|webm)"/gm);
    matches.forEach(function(code) {
      var src;
      code = code.replace(/"/g, '');
      src = path.dirname(code);
      if (code.match(/^https?:\/\//) || code.indexOf('html-component-debug.js') >= 0) {

      } else if (pathes.indexOf(src) < 0) {
        return pathes.push(src);
      }
    });
    for (j = 0, len1 = pathes.length; j < len1; j++) {
      src = pathes[j];
      asset = path.join('component-assets', src.replace(_params.assets_src_path, ''));
      srcDir = path.join(_params.assets_src, src.replace(_params.assets_src_path, ''));
      dst = path.join(dstBase, asset);
      dstDir = path.join(_params.cwd, path.dirname(dst));
      result.html = result.html.split(src).join(asset);
      result.assets.push({
        mkdir: dst,
        cpSrc: srcDir,
        cpDst: dstDir
      });
    }
    return result;
  };

  _createComponentFiles = function(data, params, callback) {
    var dest;
    dest = 'components/' + data.name + '/dist/';
    return exec('mkdir -p ' + dest, function() {
      fs.writeFileSync('./' + dest + data.name + '.html', params.html, {
        encoding: 'utf8'
      });
      if (_params.export_jade) {
        dest = 'components/' + data.name + '/src/';
        return exec('mkdir -p ' + dest, function() {
          return html2jade.convertHtml(params.html, {
            donotencode: true
          }, function(err, jade) {
            jade = jade.replace(/([\r\n]+)\s+\|\s*[\r\n]+/g, '$1');
            fs.writeFileSync('./' + dest + data.name + '.jade', jade, {
              encoding: 'utf8'
            });
            return callback();
          });
        });
      } else {
        return callback();
      }
    });
  };

  _copyComponentAssets = function(data, params, callback) {
    var copyProc, item, j, len1, nextProc, procList, ref;
    procList = [];
    copyProc = function(asset) {
      return function() {
        return exec('mkdir -p ' + asset.mkdir, function() {
          var cmd;
          cmd = ['cp -fr', asset.cpSrc, asset.cpDst].join(' ');
          return exec(cmd, function() {
            return nextProc();
          });
        });
      };
    };
    nextProc = function() {
      var proc;
      proc = procList.shift();
      if (proc) {
        return proc();
      } else {
        return callback();
      }
    };
    ref = params.assets;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      item = ref[j];
      procList.push(copyProc(item));
    }
    return nextProc();
  };

  _createHTML = function(title, css, body, exportComment) {
    var code;
    code = '<!DOCTYPE html><html><head>';
    code += '<meta charset="utf-8">';
    code += '<title>' + title + '</title>';
    if (exportComment) {
      code += '<link rel="stylesheet" href="../html-component/dist/html-component.css" exclude>';
      code += '<style exclude>' + _getStylePSE() + '</style>';
      code += '<!--export--><style>' + css + '</style>';
      code += '<link rel="stylesheet" href="./style.css">';
      code += '<!--/export--></head>';
      code += '<body><!--export-->' + body + '<!--/export-->';
      code += '<script src="../libs/bundle.js" exclude></script>';
      code += '<script src="../html-component/dist/env.js" exclude></script>';
      code += '<script src="../html-component/dist/html-component.js" exclude></script>';
      code += '<script src="../html-component/dist/html-component-debug.js" exclude></script>';
      code += '</body></html>';
    } else {
      code += '<link rel="stylesheet" href="../components/html-component/dist/html-component.css" exclude>';
      code += _getMetaData();
      code += '<style>' + css + '</style><!--include components-css--></head>';
      code += '<body>' + body;
      code += '<!--include components-js--></body></html>';
    }
    return code;
  };

  _getMetaData = function() {
    var _meta, code;
    _meta = _data.meta;
    code = '';
    if (_meta) {
      code += '<meta name="description" content="' + _meta.meta_description + '">';
      code += '<meta name="keywords" content="' + _meta.meta_keywords + '">';
      code += '<meta name="viewport" content="width=device-width,initial-scale=1">';
      code += '<meta property="og:title" content="' + _meta.meta_name + '">';
      code += '<meta property="og:site_name" content="' + _meta.meta_name + '">';
      code += '<meta property="og:type" content="website">';
      code += '<meta property="og:url" content="' + _meta.meta_url + '">';
      code += '<meta property="og:description" content="' + _meta.meta_description + '">';
      code += '<meta property="og:image" content="' + _meta.meta_image + '">';
      code += '<meta property="og:locale" content="' + _meta.meta_locale + '">';
      code += '<meta http-equiv="X-UA-Compatible" content="IE=edge">';
      code += '<meta http-equiv="Content-Style-Type" content="text/css">';
      code += '<meta http-equiv="Content-Script-Type" content="text/javascript">';
      code += '<!--link rel="apple-touch-icon" href="images/touch-icon-iphone.png"-->';
      code += '<!--link rel="shortcut icon" href="images/favicon.ico"-->';
    }
    return code;
  };

  _generateRelativeLayout = function(params, $main, result) {
    var doc, indexes, layers, offsetX, offsetY;
    doc = params.document;
    layers = params.layers;
    indexes = params.index;
    offsetX = doc.offsetX;
    offsetY = doc.offsetY;
    result.css = '';
    return _generateNodeList(indexes.children, doc, layers, $main, $main, result, doc.offsetX, doc.offsetY);
  };

  _generateNodeList = function(list, doc, layers, $root, $element, result, offsetX, offsetY) {
    var child, j, len1, results;
    results = [];
    for (j = 0, len1 = list.length; j < len1; j++) {
      child = list[j];
      if (child.enabled) {
        results.push(_generateNode(child, doc, layers, $root, $element, result, offsetX, offsetY));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  _createElementTag = function(id, layers) {
    var data, meta, option, tag;
    data = layers[id];
    option = data.option;
    meta = data.meta;
    tag = '';
    if (meta.type === 'text') {
      tag = _getText(meta.text.text);
    } else if (meta.type === 'image') {
      tag = '<img src="' + path.join(_params.assets_src_path, meta.image.url) + '" alt="' + meta.image.text.join(' ') + '">';
    }
    if (option != null ? option.link_url : void 0) {
      tag = '<a href="' + option.link_url + '" target="' + option.link_target + '">' + tag + '</a>';
    }
    tag = '<div class="pse l' + id + ' ' + option.name + '">' + tag + '</div>';
    return tag;
  };

  _generateNode = function(node, doc, layers, $root, $element, result, offsetX, offsetY) {
    var $$, $copm, $div, childContainer, cname, css, data, id, meta, option, ref_id, ref_node, tag;
    id = node.id;
    data = layers[id];
    option = data.option;
    meta = data.meta;
    tag = _createElementTag(id, layers);
    $$ = _cheerio.load(tag, {
      decodeEntities: false
    });
    $div = $$('div');
    childContainer = $div;
    if (option != null ? option.link_url : void 0) {
      childContainer = $$('a');
    }
    css = _createElementCSS(id, node, layers, offsetX, offsetY);
    if (_componentExportable && data.option.component) {
      result = {
        css: css + '\n'
      };
    } else {
      result.css += css + '\n';
    }
    if (doc.referers.indexOf(id) >= 0) {
      _ref_elements[id] = childContainer;
    }
    if (option.embed) {
      childContainer.append(unescape(option.embed));
    } else if (option.layer_name.match(/^@\d+/)) {
      ref_id = option.layer_name.match(/^@(\d+)/)[1];
      ref_node = _ref_elements[ref_id];
      if (ref_node) {
        childContainer.append(ref_node.html());
      }
    } else {
      _generateNodeList(node.children, doc, layers, $root, childContainer, result, 0, 0);
    }
    if (_componentExportable && data.option.component) {
      cname = data.option.component;
      _components.push({
        id: id,
        name: cname,
        node: $div,
        data: result
      });
      $copm = _cheerio.load('<' + cname + '></' + cname + '>', {
        decodeEntities: false
      })(cname);
      return $element.append($copm);
    } else {
      return $element.append($div);
    }
  };

  _createElementCSS = function(id, node, layers, offsetX, offsetY) {
    var bg_url, bg_x, bg_y, css, data, meta;
    data = layers[id];
    meta = data.meta;
    css = '.l' + id + '{';
    if (meta.text) {
      css += _createTextElementCSS(meta);
    }
    data.top = meta.position.relative.y + offsetY;
    data.left = meta.position.relative.x + offsetX;
    if (_isPositionRelative(data, meta, node, layers)) {
      css += 'position:relative;';
    }
    if (data.background && data.background.image) {
      bg_url = path.join(_params.assets_src_path, data.background.image);
      bg_x = data.background.pos_x;
      bg_y = data.background.pos_y;
      if (bg_y === 'middle') {
        bg_y = 'center';
      }
      css += 'background:url("' + bg_url + '") no-repeat;';
      css += 'background-position:' + bg_x + ' ' + bg_y + ';';
      css += 'background-size:cover;';
    }
    css += 'margin-top:' + data.top + 'px;';
    css += 'padding-left:' + data.left + 'px;';
    css += 'width:' + meta.size.width + 'px;';
    css += 'height:' + meta.size.height + 'px;';
    css += '';
    css += '}';
    return css;
  };

  _createTextElementCSS = function(meta) {
    var css, ref, ref1, size;
    size = Number(meta.text.size.replace(/\spx/, ''));
    css = '';
    css += 'font-family: "' + meta.text.font + '";';
    css += 'font-size:' + meta.text.size.replace(/\s+/g, '') + ';';
    css += 'color: #' + meta.text.color + ';';
    css += 'text-align: ' + meta.text.align + ';';
    css += 'line-height: ' + ((ref = meta.text.line_height) != null ? ref.replace(/\s+/g, '') : void 0) + ';';
    css += 'letter-spacing: ' + (((ref1 = meta.text) != null ? ref1.letter_spacing : void 0) / 6000 * size) + 'px;';
    return css;
  };

  _isPositionRelative = function(data, meta, node, layers) {
    var prev;
    if (node.positionRelative && node.prev_id) {
      prev = layers[node.prev_id];
      if (prev) {
        data.top = meta.position.absolute.y - prev.bounds.bottom;
      }
      return true;
    }
    if (!node.prev_id) {
      return true;
    }
    return false;
  };

  _getBasicStyle = function(params) {
    var style;
    style = 'body {';
    style += 'position:relative;';
    style += 'margin:0;';
    style += 'padding:0;';
    style += 'min-height:100%;';
    style += 'background:' + params.bgcolor + ';';
    style += '}\n';
    style += '#container {';
    style += 'position:relative;';
    style += 'margin:' + params.margin + ';';
    style += 'padding:0;';
    style += 'width:100%;';
    style += '}\n';
    style += '#main {';
    style += 'position:relative;';
    style += 'margin:0 auto;';
    style += 'padding:0;';
    style += 'width:' + params.width + 'px;';
    style += '}\n';
    style += 'p {';
    style += 'position:relative;';
    style += 'margin:0 0 32px;';
    style += 'padding:0;';
    style += '}\n';
    style += 'span, img, a {';
    style += 'display:inline-block;';
    style += 'margin:0;';
    style += 'padding:0;';
    style += '}\n';
    style += _getStylePSE();
    return style;
  };

  _getStylePSE = function() {
    var style;
    style = '';
    style += '.pse {';
    style += 'position:absolute;';
    style += 'display:block;';
    style += 'box-sizing:border-box;';
    style += 'top:0;';
    style += 'margin:0;';
    style += 'padding:0;';
    style += '}\n';
    return style;
  };

  _getText = function(text) {
    var texts;
    texts = text.split('\n\n');
    text = '<p>' + texts.join('</p><p>') + '</p>';
    text = text.replace(/\n/g, '<br>');
    return text;
  };

  return LayoutPreviewGenerator;

})();

module.exports = jsx;
